#!/usr/bin/env python

import re
import sys
import os

source = os.path.abspath(sys.argv[1])
base   = os.path.splitext(source)[0]
target = re.sub('tests/', 'tests/python/', base + '.py')

fd = open(source, "r")
fo = open('/tmp/test', "w")

fo.write('''# -*- coding: utf-8 -*-

import unittest
import exceptions
import operator

from ledger import *
from StringIO import *

internalAmount = amount.exact

class %sTestCase(unittest.TestCase):
    testSession = None

    def assertValid(self, amt):
        self.assertTrue(amt.valid())''' % os.path.basename(base))

for line in fd.readlines():
    if re.match('^(using|CPP|[#{}/])', line):
        continue

    match = re.match('void [^:]+::(test[^(]+|setUp|tearDown)\(\)', line)
    if match:
        fo.write('    def %s(self):\n' % match.group(1))
        continue

    match = re.search('  ([a-z:_]+?)\s+([a-z0-9]+)(\((.+?)\))?;', line)
    if match:
        line = '  %s = %s(%s)\n' % (match.group(2), match.group(1),
                                    match.group(4) or "")

    match = re.search('  ([a-z:_]+?)\s+([a-z0-9]+)\s*=\s*([^(]+);', line)
    if match:
        line = '  %s = %s(%s)\n' % (match.group(2), match.group(1),
                                    match.group(3))

    match = re.search('  ([a-z:_]+?)\s+([a-z0-9]+)\s*=\s*(.+?)$', line)
    if match:
        line = '  %s = %s\n' % (match.group(2), match.group(3))

    line = re.sub('CPPUNIT_ASSERT', 'self.assertTrue', line)
    line = re.sub('assertValid', 'self.assertValid', line)
    line = re.sub('assertTrue', 'self.assertTrue', line)
    line = re.sub('assertFalse', 'self.assertFalse', line)
    line = re.sub('assertNotEqual', 'self.assertNotEqual', line)
    line = re.sub('assertEqual', 'self.assertEqual', line)
    line = re.sub('assertThrow\(([^,]+?), ([^)]+?)\)',
                  'self.assertRaises(\\2, lambda: \\1)', line)
    line = re.sub('amount_t::precision_t\(([^)]+?)\)', '\\1', line)
    line = re.sub('amount_t::', 'amount.', line)
    line = re.sub('ledger::', '', line)
    line = re.sub('std::istringstream', 'StringIO', line)
    line = re.sub('std::ostringstream', 'StringIO', line)
    line = re.sub('set_session_context\(&session\)',
                  'self.testSession = session()\n        set_session_context(self.testSession)', line)
    line = re.sub('set_session_context\(\)',
                  'set_session_context()\n        self.testSession = None', line)
    line = re.sub('([a-z_]+?)_t', '\\1', line)
    line = re.sub('std::string\(([^)]+?)\)', '\\1', line)
    line = re.sub('string\(([^)]+?)\)', '\\1', line)
    line = re.sub('true', 'True', line)
    line = re.sub('false', 'False', line)
    line = re.sub('([0-9]+)[FL]', '\\1', line)
    line = re.sub('([0-9]+)UL', '\\1L', line)
    line = re.sub(';', '', line)
    line = re.sub('//', '#', line)
    line = re.sub('->', '.', line)
    line = re.sub('(\s+|\()(\S+?) \? (.+?) : (.+?)\)',
                  '\\1\\3 if \\2 else \\4)', line)
    line = re.sub('if \((.+?)\)( {)?$', 'if \\1:', line)
    line = re.sub('(} )?else( {)?$', 'else:', line)

    line = re.sub('amount_error', 'exceptions.ArithmeticError', line)
        
    match = re.match('^  ', line)
    if match:
        fo.write('      ' + line)
    else:
        fo.write(line)

fo.write('''
 
def suite():
    return unittest.TestLoader().loadTestsFromTestCase(%sTestCase)

if __name__ == '__main__':
    unittest.main()
''' % os.path.basename(base))

fo.close()
fd.close()
