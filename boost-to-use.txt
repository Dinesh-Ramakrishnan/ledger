Boost libraries to integrate into Ledger:

  BOOST_STATIC_ASSERT
  Boost.Lambda
  
  lexical_cast	   	   - For converting string<->number
  numeric_cast		   - For converting number<->number
  polymorphic_cast
  polymorphic_downcast	   - Use this if certain it will succeed
  
  path			   - Also look at the filesystem reference
  fstream.hpp		   - i/ofstream that use boost::path
  filesystem/exception.hpp - Exceptions to check for (or just let them through?)
* checked_delete
  
  int8_t
  int_fast32_t
  int_least16_t
  any
  tribool
  tuple
  variant
  optional
  noncopyable		   - Inherit from this to make a noncopyable class
  operators		   - For defining the behavior of numerical types
  pool
  std::bitset
  
  signals
  bind, mem_fn (and ref/cref)
  function
  
  ptr_array
  ptr_list
  ptr_map
  ptr_vector
  scoped_ptr
  shared_ptr, weak_ptr
  intrusive_ptr
  
  sub_range<type>(begin_iterator, end_iterator)
  iterator_range<type::iterator>(begin_iterator, end_iterator)

  tokenizer		   - For splitting strings (like a lazy strtok)
  string algorithms	   - See reference for functions
  next			   - For accessing the result of ++tier
  prior
  
  random
  thread		   - Try using threading for transaction parsing
